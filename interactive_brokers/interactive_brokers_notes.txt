################
# Introduction
################
- using IB's native IPs to connect to IB's platform
- extracting data, performing technical analysis, order management
- performing fundamental analysis
- backtesting strategies
- deploying trading strategies
- streaming tick level data

# install from IB:
- trading workstation (TWS)
- trading API
- IB Gateway (50% lighter than TWS)
- can also download IBKR Mobile

# demo account
my gmail id
srivaris1
passwd - my gmail account

# usual API architecture
Trading Application (code / script) <==> Broker's servers (get data/send orders etc)

- in IB API architecture, there is a middleman TWS / IBG (IB Gateway) in between
Trading Application (code / script) <==> TWS / IBG <==> IB servers (get data/send orders etc)

- IB does not have HTTP REST API interface

# create a new virtual env
conda create --name quant python=3.8
conda env list
conda activate quant
conda install -c anaconda spyder

- launch spyder
spyder
spyder --new-instance

- deactivate and come out of virtual env
conda deactivate

- install the packages only used as mentioned

## install IB python client
conda activate quant
cd ~/Downloads/twsapi_macunix.976.01 2/IBJts/source/pythonclient
python setup.py install


## TWS/IB Gateway API Configuration settings
- need to check "Enable ActiveX and Socket Clients" option
- this is required to enable TWS/IBG to listen to API calls on a given port

# need to enter the correct port number
- TWS Live Trading: 7496
- TWS Paper Trading: 7497
- IB Gateway Live Trading: 4001
- IB Gateway Paper Trading: 4002

- check "Read Only API" if don't want to place/modify trades accidentally
- not relevant for paper trading account

- launch TWS -> File -> Global Configuration -> API -> Settings
- launch IB Gateway -> chose IB API -> Configure -> API -> Settings

- Enable ActiveX and Socket Clients
- Logging Level = warning
- Allow connections from local host only


###########################
# Advanced Python Concepts
###########################

# OOP Basics
- demo script: oop1.py
- use dir(float) to get all attributes and methods in float class

# OOP inheritance
- demo script: oop2.py
- use super().__init__(<args>) or super(subclass, self).__init__(<args>)

# Threads in python
- demo script: threads.py
- useful resource:
https://realpython.com/python-memory-management/

- basic syntax to create thread and start
thr1 = threading.Thread(target=randNumGen) # randNumGen is a function and dont use randNumGen()
thr1.start()

- create a daemon thread (doesn't work on spyder)
thr1 = threading.Thread(target=randNumGen, daemon=True)
OR
thr1.daemon = True

- use sleep as = time.sleep(1)


# Events
- demo script: events.py
- concept is similar to a boolean flag
event = threading.Event()
if event.is_set()
event.set()
event.clear()


# HTTP Connection (Request / Response)
Client <--> Port/socket connection : HTTP GET/POST <--> Server

- High Level Architecture
  Socket connection is established after handshake
  HTTP GET request sent by client
  Server checks the sanctity of the request
  Server responds to request and transfer data
  Connection is closed

- Pull mechanism - Client (browser) needs to pull information whenever required
- Significant overhead in opening and closing socket connections
- Works well simple data transfers for but not practical for applications like market data streaming


# Websocket Connection (Streaming)
Client <--> Port/socket connection <--> Server

- High Level Architecture
  Socket connection is established
  Bidirectional transfer of messages
  Connection stays open until explicitly closed

- Data pushed to the client whenever made available
- Persistent connection
- Used mostly for real-time applications such as market data streaming


######################################
# Understanding IB API Python Wrapper
######################################
- API
https://interactivebrokers.github.io/tws-api/

- API in local drive
/Users/tanvimohan/Downloads/twsapi_macunix.976.01 2/IBJts/source/pythonclient/ibapi

# EClient and EWrapper classes intro
- EClient class is used to create the client to connect to TWS
from ibapi.client import EClient

- EWrapper class is used to translate communication between TWS and python code
from ibapi.wrapper import EWrapper


# Get contract information
- class
from ibapi.contract import Contract

- in TWS, right click on ticker -> Financial Instrument Info -> Description
example:
app.connect("127.0.0.1", args.port, clientId=0)

















